#!/usr/bin/python3
#
# initialisation script to make generic shanoir-* aliases in /etc/hosts from
# the existing hosts whose name starts with "${DOCKER_PREFIX}-"
#
import logging
import os
import re
import sys

SERVICES = """
    mysql
    pacs
    shanoir

    ng-nginx
    ng-rabbitmq
    ng-keycloak

    ng-users
    ng-studies
    ng-studycards
""".split()

ETC_HOSTS = "/etc/hosts"

log=logging.getLogger("configure-hosts")


def die(msg, *k):
    log.fatal(msg, *k)
    sys.exit(1)

nb_errors = 0
def error(msg, *k):
    global nb_errors
    log.error(msg, *k)
    nb_errors += 1
    

def parse_etc_hosts():
    """return a dict {HOST: IPADDESS}"""

    hosts = {}
    with open(ETC_HOSTS) as fp:
        for line in fp:
            mo = re.match("\s*(\d+\.\d+\.\d+\.\d+)\s+([^#]+)", line)
            if mo:
                ip = mo.group(1)
                for host in mo.group(2).split():
                    old_ip = hosts.get(host)
                    if old_ip is None:
                        hosts[host] = ip
                    else:
                        # duplicated entry
                        if hosts[host] != ip:
                            error("host %r has multiple IP addresses: %s vs. %s",
                                host, old_ip, ip)
    return hosts

def patch_etc_hosts(hosts, prefix):
    old = prefix + "-"
    new = "shanoir-"

    with open(ETC_HOSTS, "a") as fp:
        for host, ip in hosts.items():
            if host.startswith(old):
                service = host[len(old):]
                if service.startswith("ng-"):
                    # shanoir ng services:
                    #   shanoir-ng-users
                    #   shanoir-ng-keycloak
                    #   ...
                    alias = new + service
                else:
                    # shanoir old services (no prefix)
                    #   shanoir
                    #   pacs
                    #   ...
                    alias = service

                old_ip = hosts.get(alias)
                if old_ip is None:
                    fp.write("%-16s %s\n" % (ip, alias))
                elif old_ip != ip:
                    error("conflicting addresses for host %s: %s (found in /etc/hosts) and %s (aliased from %s)",
                        alias, old_ip, ip, host)
        

logging.basicConfig(level=logging.INFO)


prefix = os.environ.get("DOCKER_PREFIX")
prefix or die("the environment var DOCKER_PREFIX is not set")
hosts = parse_etc_hosts()
if not nb_errors:
    patch_etc_hosts(hosts, prefix)
if nb_errors:
    die("aborting (%d error(s))", nb_errors)
            
