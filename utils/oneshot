#!/bin/bash

tmp_fifo()
{
	local fifo="`mktemp -u`"
	mkfifo "$fifo"
	echo "$fifo"
}

set -e

if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
	cat <<EOF
usage:	oneshot PATTERN [PATTERN...] -- COMMAND [ARG1 ...]

Run a command, monitor its outputs, and kill it after the given patterns have
been matched.

- PATTERNs are expressed as POSIX Extended Regular Expressions 
- COMMAND [ARG1 ...] is the command to be executed

PATTERNs are searched in the combined output (stdout+stderr) of the executed
process . The ordering is strict: they must be matched in the same order as
given in the command line.

After the last PATTERN is matched, the oneshot script sends  SIGTERM to the
process, then wait for its termination.

The exit code is the numeber of remaining PATTERNs to be matched (0 if all
PATTERNs were matched successfully).
EOF
	exit 0
fi

patterns=()
while [ "$1" != "--" ] ; do
	patterns+=("$1")
	shift
done
shift

# run the command with its outputs redirected to a fifo

fifo="`tmp_fifo`"
trap "rm $fifo" EXIT

exec "$@" >"$fifo" 2>&1 &
pid=$!
trap "kill $pid" INT TERM

# read from the fifo and match each pattern in order
IFS=
current=0
while read -r line ; do
	echo "$line"
	if [[ "$line" =~ ${patterns[$current]} ]] ; then
		if [ $((++current)) -eq ${#patterns[@]} ] ; then
			echo "  ------------------- sending SIGTERM -----------------------"
			kill "$pid" || true
			while read -r line ; do
				echo "$line"
			done
			break
		fi
	fi
done <"$fifo"

# eof

wait "$pid" || true

result=$((${#patterns[@]} - current))
echo "  ------------------- terminated (exit $result) -------------------"
exit "$result"

