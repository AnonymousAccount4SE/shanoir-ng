/**
 * Shanoir NG - Import, manage and share neuroimaging data
 * Copyright (C) 2009-2019 Inria - https://www.inria.fr/
 * Contact us on https://project.inria.fr/shanoir/
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */ 
package org.shanoir.ng.solr.service;

import java.util.Iterator;
import java.util.List;

import org.shanoir.ng.solr.model.ShanoirMetadata;
import org.shanoir.ng.solr.model.ShanoirSolrDocument;
import org.shanoir.ng.solr.repository.ShanoirMetadataRepository;
import org.shanoir.ng.solr.repository.SolrRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author yyao
 *
 */
@Service
public class SolrServiceImpl implements SolrService {
	
//	private static final Logger LOG = LoggerFactory.getLogger(SolrServiceImpl.class);
	
	@Autowired 
	private SolrRepository solrRepository;
	
	@Autowired
	private ShanoirMetadataRepository shanoirMetadataRepository;
	
	@Transactional
	@Override
	public void addToIndex (final ShanoirSolrDocument document) {
		solrRepository.save(document);
	}

	@Transactional
	@Override
	public void deleteFromIndex(Long datasetId) {
		solrRepository.delete(datasetId);
	}
	
	@Transactional
	@Override
	public void deleteAll() {
		solrRepository.deleteAll();
	}
	
	@Transactional
	@Override
	public void indexAll() {
		// 1. get all datasets
		List<ShanoirMetadata> documents = shanoirMetadataRepository.findAllAsSolrDoc();
		Iterator<ShanoirMetadata> docIt = documents.iterator();
		while (docIt.hasNext()) {
			ShanoirMetadata shanoirMetadata = docIt.next();
			ShanoirSolrDocument doc = new ShanoirSolrDocument(shanoirMetadata.getDatasetId(), shanoirMetadata.getDatasetName(),
					shanoirMetadata.getDatasetType(), shanoirMetadata.getDatasetNature(), shanoirMetadata.getDatasetCreationDate(),
					shanoirMetadata.getExaminationComment(), shanoirMetadata.getExaminationDate(),
					shanoirMetadata.getSubjectName(), shanoirMetadata.getStudyName(), shanoirMetadata.getStudyId());
			addToIndex(doc);
		}
	}
	
//	public Iterable<ShanoirSolrDocument> getDocuments() {
//		return repository.findAll();
//	}
//	
//	public List<ShanoirSolrDocument> findDocumentByDatasetName(String datasetName) {
//		return repository.findByDatasetName(datasetName);
//	}

}
