#!/usr/bin/python3
#
# This script syncs the keycloak config with the runtime config provided in
# environment variables:
#	SMTP_HOST
#	SMTP_PORT
#	SHANOIR_ADMIN_EMAIL
#	SHANOIR_ADMIN_NAME
#	SHANOIR_SERVER_URL
#
# NOTE:
#  - it should not be run while keycloak is up
#  - it updates directly the mysql database (hope the schema will not change too often)
#

import logging
import os
import subprocess
import sys

import pymysql

REALM = "shanoir-ng"

def die(msg, *k):
    log.fatal(msg, *k)
    sys.exit(1)

def get_client_id(name):
    cur.execute("SELECT ID FROM CLIENT WHERE CLIENT_ID=%s", [name])
    cur.rowcount or die("client %r not found", name)
    client_id, = cur.fetchone()
    log.info("Found client %r with id %r", name, client_id)
    return client_id

class ScalarProxy:
    def __init__(self, table, key_name, key_id):
        self.table    = table
        self.key_name = key_name
        self.key_id   = key_id

    def set(self, value):
        log.info("set %s=%r", self.table, value)
        cur.execute("DELETE FROM {table} WHERE {key_name}=%s".format(**self.__dict__),
            (self.key_id,))
        cur.execute("INSERT INTO {table} ({key_name}, VALUE) VALUES (%s, %s)".format(**self.__dict__),
            (self.key_id, value))
        

class HashProxy:
    def __init__(self, table, key_name, key_id):
        self.table    = table
        self.key_name = key_name
        self.key_id   = key_id

    def __setitem__(self, name, value):
        log.info("set %s[%s]=%r", self.table, name, value)
        cur.execute("""INSERT INTO {table} ({key_name}, VALUE, NAME) VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE VALUE=%s""".format(table=self.table, key_name=self.key_name),
            (self.key_id, value, name, value))


logging.basicConfig(level=logging.INFO)
log=logging.getLogger("configure-keycloak")

# connect to the database
conn = pymysql.connect(database="keycloak", charset="utf8")
cur  = conn.cursor()

# get the realm_id
cur.execute("SELECT ID FROM REALM WHERE NAME=%s", [REALM])
cur.rowcount or    die("realm %r not found", REALM)
realm_id, = cur.fetchone()

log.info("Found realm %r with id %r", REALM, realm_id)

##########################
# SMTP configuration

smtp = HashProxy("REALM_SMTP_CONFIG", "REALM_ID", realm_id)
smtp["host"] =            os.environ["SMTP_HOST"]
smtp["port"] =    str(int(os.environ["SMTP_PORT"]))
smtp["from"] =            os.environ["SHANOIR_ADMIN_EMAIL"]
smtp["fromDisplayName"] = os.environ["SHANOIR_ADMIN_NAME"]


##########################
# Frontend configuration

### shanoir-ng-front
client_id = get_client_id("shanoir-ng-front")

# Web Origins
ScalarProxy("WEB_ORIGINS",   "CLIENT_ID", client_id).set(os.environ["SHANOIR_SERVER_URL"])
# Valid Redirect URIs
ScalarProxy("REDIRECT_URIS", "CLIENT_ID", client_id).set(os.environ["SHANOIR_SERVER_URL"] + "/shanoir-ng/*")


### shanoir-old
client_id = get_client_id("shanoir-old")
cattr=HashProxy("CLIENT_ATTRIBUTES", "CLIENT_ID", client_id)
cattr["saml_assertion_consumer_url_post"] = os.environ["SHANOIR_SERVER_URL"] + "/Shanoir/saml"


##########################
# Static files configuration

subprocess.check_call(["override", "-e", "SHANOIR_SERVER_URL", "/opt/keycloak/themes/shanoir-theme/login/theme.properties"])


################################
# commit the changes into the db
conn.commit()
