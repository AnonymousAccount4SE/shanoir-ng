swagger: "2.0"
info:
  version: "0.0.1"
  title: Shanoir NG Users Microservice
  description: Microservice API for Shanoir NG user managment
produces:
  - application/json
  
paths:
  /user:
    post:
      operationId: saveNewUser
      description: Saves a new user
      consumes: 
        - application/json
      parameters:
        - name: user
          in: body
          description: user to create
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        '200':
          description: created user
          schema:
            $ref: "#/definitions/User"
        '422':
          description: bad parameters
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorModel"
  /user/{userId}:
    get:
      operationId: findUserById
      description: If exists, returns the user corresponding to the given id
      parameters:
        - $ref: "#/parameters/userId"
      responses:
        '200':
          description: found user 
          schema:
            $ref: "#/definitions/User"
        '404':
          description: no user found
        default:
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      operationId: updateUser
      description: Updates a user
      consumes: 
        - application/json
      parameters:
        - $ref: "#/parameters/userId"
        - name: user
          in: body
          description: user to update
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        '204':
          description: user updated
        '422':
          description: bad parameters
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      operationId: deleteUser
      description: Deletes a user
      parameters:
        - $ref: "#/parameters/userId"
      responses:
        '204':
          description: user deleted
        '404':
          description: no user found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /user/{userId}/accountrequest:
    patch:
      operationId: handleAccountRequest
      description: Handles an account request
      consumes: 
        - application/json
      parameters:
        - $ref: "#/parameters/userId"
        - name: acceptRequest
          in: body
          description: user account answer
          required: true
          schema:
            type: boolean
      responses:
        '204':
          description: user confirmed
        '404':
          description: no user found
        '500':
          description: internal error
  /user/all:
    get:
      operationId: findUsers
      description: Returns all the users
      responses:
        '200':
          description: found users 
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        '204':
          description: no user found
        default:
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorModel"
  /role/all:
    get:
      operationId: findRoles
      description: Returns all the roles
      responses:
        '200':
          description: found roles
          schema:
            type: array
            items:
              $ref: "#/definitions/Role"
        '204':
          description: no role found
        default:
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorModel"
parameters:
  userId:
    name: userId
    in: path
    description: id of the user
    required: true
    type: integer
    format: int64

definitions:
  User:
    type: object
    required:
      - id
      - accountRequestDemand
      - canAccessToDicomAssociation
      - creationDate
      - email
      - firstName
      - lastName
      - password
      - role
      - username
    properties:
      id:
        type: integer
        format: int64
      accountRequestDemand:
        type: boolean
      accountRequestInfo:
        $ref: "#/definitions/AccountRequestInfo"
      canAccessToDicomAssociation:
        type: boolean
      creationDate:
        type: string
        format: date
      email:
        type: string
      expirationDate:
        type: string
        format: date
      firstName:
        type: string
      lastLogin:
        type: string
        format: date
      lastName:
        type: string
      password:
        type: string
        format: password
      role:
        $ref: "#/definitions/Role"
      teamName:
        type: string
      username:
        type: string
  AccountRequestInfo:
    type: object
    required:
      - id
      - contact
      - function
      - institution
      - service
      - study
      - work
    properties:
      id:
        type: integer
        format: int64
      contact:
        type: string
      function:
        type: string
      institution:
        type: string
      service:
        type: string
      study:
        type: string
      work:
        type: string
  Role:
    type: object
    required:
      - id
      - accessLevel
      - displayName
      - name
    properties:
      id:
        type: integer
        format: int64
      accessLevel:
        type: integer
        format: int32
      displayName:
        type: string
      name:
        type: string
  ErrorModel:
    type: object
    properties:
      code:
        type: integer
        format: int32
      details:
        type: object
      message:
        type: string
